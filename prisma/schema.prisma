generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Attachment {
  id        String   @id @default(uuid())
  fileName  String
  directory String
  length    BigInt
  mediaType String
  createdAt DateTime @default(now())

  accounts    Account[]
  departments Department[]
}

model Location {
  id      String @id @default(uuid())
  name    String
  detail  String
  street  String
  city    String
  country String
  lat     Float
  lng     Float

  departments Department[]
}

model Role {
  id          String  @id @default(uuid())
  name        String
  description String?

  accounts Account[]
}

model Account {
  id       String  @id @default(uuid())
  roleId   String
  avatarId String?

  username        String  @unique
  password        String
  email           String? @unique
  phoneNumber     String? @unique
  walletAddress   String  @unique
  walletMnemonic  String  @unique
  emailIsVerified Boolean @default(true)

  role   Role        @relation(fields: [roleId], references: [id])
  avatar Attachment? @relation(fields: [avatarId], references: [id])

  user     User?
  staff    Staff?
  bookings BookingTime[]
}

model Position {
  id   String @id @default(uuid())
  name String

  staffAssignments PositionStaff[]
}

model Service {
  id           String  @id @default(uuid())
  name         String
  description  String?
  durationTime Int     @default(0)
  price        Int     @default(0)

  medicalRooms MedicalRoom[]
}

model PositionStaff {
  positionId String
  staffId    String

  position Position @relation(fields: [positionId], references: [id])
  staff    Staff    @relation(fields: [staffId], references: [id])

  @@id([positionId, staffId])
}

model Department {
  id              String  @id @default(uuid())
  locationId      String
  name            String
  symbol          String
  floor           Int     @default(0)
  iconId          String?
  backgroundColor String?
  description     String?

  location         Location            @relation(fields: [locationId], references: [id])
  icon             Attachment?         @relation(fields: [iconId], references: [id])
  medicalRooms     MedicalRoom[]
  staffAssignments StaffOnDepartment[]
}

model StaffOnDepartment {
  staffId      String
  departmentId String

  staff      Staff      @relation(fields: [staffId], references: [id])
  department Department @relation(fields: [departmentId], references: [id])

  @@id([staffId, departmentId])
}

model MedicalRoom {
  id           String @id @default(uuid())
  departmentId String
  serviceId    String
  floor        Int    @default(0)
  name         String

  department Department @relation(fields: [departmentId], references: [id])
  service    Service    @relation(fields: [serviceId], references: [id])

  times        MedicalRoomTime[]
  appointments Appointment[]
  shifts       ShiftWorking[]
}

model MedicalRoomTime {
  id       String   @id @default(uuid())
  roomId   String
  fromTime DateTime
  toTime   DateTime

  room     MedicalRoom   @relation(fields: [roomId], references: [id])
  bookings BookingTime[]
}

model User {
  id          String  @id @default(uuid())
  accountId   String  @unique
  firstname   String
  lastname    String
  phoneNumber String?
  address     String?

  account      Account       @relation(fields: [accountId], references: [id])
  appointments Appointment[]
  Patient      Patient[]
  BookingTime  BookingTime[]
}

model Patient {
  id          String  @id @default(uuid())
  userId      String
  firstname   String
  lastname    String
  phoneNumber String?
  address     String?
  gender      GENDER?

  user        User          @relation(fields: [userId], references: [id])
  BookingTime BookingTime[]
  Appointment Appointment[]
}

model Staff {
  id             String          @id @default(uuid())
  accountId      String          @unique
  firstname      String
  lastname       String
  introduction   String?
  educationLevel EDUCATIONLEVEL?
  gender         GENDER?

  account     Account             @relation(fields: [accountId], references: [id])
  positions   PositionStaff[]
  departments StaffOnDepartment[]
  shifts      ShiftWorking[]
}

model BookingTime {
  id                String @id @default(uuid())
  medicalRoomTimeId String
  userId            String
  patientId         String

  medicalRoomTime MedicalRoomTime @relation(fields: [medicalRoomTimeId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  patient         Patient         @relation(fields: [patientId], references: [id])
  appointment     Appointment?
  Account         Account?        @relation(fields: [accountId], references: [id])
  accountId       String?
}

model ShiftWorking {
  id       String   @id @default(uuid())
  staffId  String
  roomId   String
  fromTime DateTime
  toTime   DateTime

  staff Staff       @relation(fields: [staffId], references: [id])
  room  MedicalRoom @relation(fields: [roomId], references: [id])
}

model Appointment {
  id            String            @id @default(uuid())
  medicalRoomId String
  userId        String
  bookingTimeId String            @unique
  patientId     String
  status        APPOINTMENTSTATUS @default(IDLE)
  totalPrice    Int               @default(0)

  medicalRoom MedicalRoom @relation(fields: [medicalRoomId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
  patient     Patient     @relation(fields: [patientId], references: [id])
  bookingTime BookingTime @relation(fields: [bookingTimeId], references: [id])

  suggestions DiagnosisSuggestion[]
  statusLogs  AppointmentStatusLog[]
}

model AppointmentStatusLog {
  id            String            @id @default(uuid())
  appointmentId String
  status        APPOINTMENTSTATUS
  updatedAt     DateTime          @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

model DiagnosisSuggestion {
  id            String @id @default(uuid())
  appointmentId String

  suggestedByAI String?
  disease       String?
  confidence    Float    @default(0)
  description   String?
  createdAt     DateTime @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

enum EDUCATIONLEVEL {
  DIPLOMA
  ASSOCIATE
  BACHELOR
  MASTER
  PROFESSIONAL
}

enum APPOINTMENTSTATUS {
  IDLE
  BOOKED
  PAID
  CANCEL
  FINISHED
}

enum GENDER {
  MALE
  FEMALE
}
